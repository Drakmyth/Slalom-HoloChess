using System.Collections.Generic;
using System.Linq;
using DejarikLibrary;
using UnityEngine;

<<<<<<< Updated upstream
public class BoardSpace : MonoBehaviour {

    public Node Node { get; set; }
    public GameObject SelectionIndicatorPrefab;
    private GameObject SelectionIndicatorInstance;
    private Color OriginalColor { get; set; }

	// Use this for initialization
	void Start () {
        var meshRenderer = this.gameObject.GetComponent<MeshRenderer>();
	    OriginalColor = meshRenderer.material.color;
        Quaternion selectionIndicatorQuaternion = Quaternion.Euler(SelectionIndicatorPrefab.transform.rotation.eulerAngles.x, SelectionIndicatorPrefab.transform.rotation.eulerAngles.y, SelectionIndicatorPrefab.transform.rotation.eulerAngles.z);
        SelectionIndicatorInstance = Instantiate(SelectionIndicatorPrefab,
	        new Vector3(Node.XPosition, SelectionIndicatorPrefab.transform.position.y, Node.YPosition), selectionIndicatorQuaternion) as GameObject;
        SelectionIndicatorInstance.SetActive(false);

	}
=======
namespace Assets.Scripts
{
    public class BoardSpace : MonoBehaviour {

        public int NodeId { get; set; }
        private Color OriginalColor { get; set; }
        private float OriginalColorAlpha { get; set; }

        // Use this for initialization
        void Start () {
            MeshRenderer meshRenderer = this.gameObject.GetComponent<MeshRenderer>();
            OriginalColor = meshRenderer.material.color;
            OriginalColorAlpha = OriginalColor.a;
        }
>>>>>>> Stashed changes
	
        // Update is called once per frame
        void Update () {
	
<<<<<<< Updated upstream
	}

    void OnAvailableMonsters(IEnumerable<int> availableNodeIds)
    {

        var meshRenderer = this.gameObject.GetComponent<MeshRenderer>();

        if (availableNodeIds.Contains(Node.Id))
        {
            meshRenderer.material.color = Color.blue;
=======
>>>>>>> Stashed changes
        }

        void OnAvailableMonsters(IEnumerable<int> availableNodeIds)
        {
            MeshRenderer meshRenderer = gameObject.GetComponent<MeshRenderer>();

            meshRenderer.material.color = availableNodeIds.Contains(NodeId) ? Color.cyan : OriginalColor;
        }

        void OnAvailableAttacks(IEnumerable<int> availableNodeIds)
        {
            MeshRenderer meshRenderer = gameObject.GetComponent<MeshRenderer>();

            meshRenderer.material.color = availableNodeIds.Contains(NodeId) ? Color.red : OriginalColor;
        }

<<<<<<< Updated upstream
        if (availableNodeIds.Contains(Node.Id))
=======
        void OnAvailableMoves(IEnumerable<int> availableNodeIds)
>>>>>>> Stashed changes
        {
            MeshRenderer meshRenderer = gameObject.GetComponent<MeshRenderer>();

            meshRenderer.material.color = availableNodeIds.Contains(NodeId) ? Color.green : OriginalColor;
        }
<<<<<<< Updated upstream
        else if (meshRenderer.material.color == Color.red)
=======

        void OnMonsterSelected(int nodeId)
>>>>>>> Stashed changes
        {
            MeshRenderer meshRenderer = gameObject.GetComponent<MeshRenderer>();

            meshRenderer.material.color = nodeId == NodeId ? new Color(meshRenderer.material.color.r, meshRenderer.material.color.b, meshRenderer.material.color.g, .8f) : new Color(meshRenderer.material.color.r, meshRenderer.material.color.b, meshRenderer.material.color.g, OriginalColorAlpha);
        }


<<<<<<< Updated upstream
        if (availableNodeIds.Contains(Node.Id))
        {
            meshRenderer.material.color = Color.green;
        }
        else if (meshRenderer.material.color == Color.green)
        {
            meshRenderer.material.color = OriginalColor;
        }
    }

    void OnMonsterSelected(int nodeId)
    {
=======
        void OnClearHighlighting()
        {
>>>>>>> Stashed changes

            var meshRenderer = gameObject.GetComponent<MeshRenderer>();

<<<<<<< Updated upstream
        if (nodeId == Node.Id)
        {
            SelectionIndicatorInstance.SetActive(true);
=======
            meshRenderer.material.color = OriginalColor;
>>>>>>> Stashed changes
        }

        void OnSelected(GameObject gameStateObject)
        {
<<<<<<< Updated upstream
            SelectionIndicatorInstance.SetActive(false);
        }
    }

    void OnClearHighlighting()
    {
        var meshRenderer = this.gameObject.GetComponent<MeshRenderer>();

        meshRenderer.material.color = OriginalColor;

        SelectionIndicatorInstance.SetActive(false);

    }

    void OnClearHighlightingWithSelection(Node selectedNode)
    {

        var meshRenderer = this.gameObject.GetComponent<MeshRenderer>();

        if (meshRenderer.material.color != Color.blue)
        {
            meshRenderer.material.color = OriginalColor;
        }

        if (selectedNode != null && selectedNode.Equals(Node))
        {
            SelectionIndicatorInstance.SetActive(true);
        }
        else
        {
            SelectionIndicatorInstance.SetActive(false);
        }

    }

    void OnSelected(GameObject gameStateObject)
    {
        gameStateObject.SendMessage("OnSpaceSelected", Node.Id);
    }
=======
            gameStateObject.SendMessage("OnSpaceSelected", NodeId);
        }
    }
>>>>>>> Stashed changes
}
